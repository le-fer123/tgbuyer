import uuid
import time
import asyncio
from typing import TYPE_CHECKING

from aiogram import Bot

from app.core.logger import logger
from app.interfaces.repositories import (
    IAutoBuySettingRepository,
    IGiftRepository,
    IUserRepository,
)
from app.interfaces.services.gifts_service import IGiftsService

from app.interfaces.telegram.messages import MESSAGES

if TYPE_CHECKING:
    from app.application.use_cases.gifts.purchase_gift import PurchaseGift


class AutoBuyGiftsForAllUsers:
    def __init__(
        self,
        user_repo: IUserRepository,
        auto_buy_repo: IAutoBuySettingRepository,
        gift_repo: IGiftRepository,
        gifts_service: IGiftsService,
        purchase_gift_uc: "PurchaseGift",
        transaction_repo,
        bot: Bot,
    ):
        self.user_repo = user_repo
        self.auto_buy_repo = auto_buy_repo
        self.gift_repo = gift_repo
        self.gifts_service = gifts_service
        self.purchase_gift_uc = purchase_gift_uc
        self.transaction_repo = transaction_repo
        self.bot = bot

    async def execute(self):
        logger.info("[UseCase:AutoBuyGifts] –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏")
        start_time = time.monotonic()
        users_settings = (
            await self.user_repo.get_all_with_auto_buy_enabled_and_settings()
        )
        gifts = await self.gift_repo.get_new_gifts()

        logger.info(
            f"[UseCase:AutoBuyGifts] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_settings)}, –Ω–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {len(gifts)}"
        )

        async def process_user(user, settings):
            suitable = []
            not_suitable = []
            not_enough_balance = []

            for gift in gifts:
                if not (
                    settings.price_limit_from
                    <= gift.star_count
                    <= settings.price_limit_to
                ):
                    not_suitable.append(gift)
                    continue
                if (
                    settings.supply_limit
                    and gift.total_count
                    and gift.total_count > settings.supply_limit
                ):
                    not_suitable.append(gift)
                    continue
                if user.balance < gift.star_count:
                    not_enough_balance.append(gift)
                    continue
                suitable.append(gift)

            lang = getattr(user, "language", "ru")

            msg = f"üéÅ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏! –í—Å–µ–≥–æ: {len(gifts)}\n"

            if suitable:
                msg += f"{MESSAGES[lang].get('autobuy_suitable', '–ü–æ–¥—Ö–æ–¥—è—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º')}: {len(suitable)}\n"
                for gift in suitable:
                    msg += f"‚Ä¢ {gift.emoji} ID: {gift.gift_id}, –¶–µ–Ω–∞: {gift.star_count}‚≠êÔ∏è\n"

            if not_enough_balance:
                msg += f"{MESSAGES[lang].get('autobuy_no_balance', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞')}: {len(not_enough_balance)}\n"
                for gift in not_enough_balance:
                    msg += f"‚Ä¢ {gift.emoji} ID: {gift.gift_id}, –¶–µ–Ω–∞: {gift.star_count}‚≠êÔ∏è\n"

            if not_suitable:
                msg += f"{MESSAGES[lang].get('autobuy_not_suitable', '–ù–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º')}: {len(not_suitable)}\n"
                for gift in not_suitable:
                    msg += f"‚Ä¢ {gift.emoji} ID: {gift.gift_id}, –¶–µ–Ω–∞: {gift.star_count}‚≠êÔ∏è\n"

            if suitable:
                msg += f"\n{MESSAGES[lang].get('autobuy_try_buy', '–ü—Ä–æ–±—É—é –∫—É–ø–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏...')}"

            else:
                msg += f"\n{MESSAGES[lang].get('autobuy_no_suitable', '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏.')}"

            try:
                await self.bot.send_message(user.telegram_id, msg)
            except Exception as e:
                logger.error(
                    f"[AutoBuyGifts] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user.telegram_id}: {e}"
                )

            for gift in suitable:
                for cycle in range(settings.cycles):
                    logger.info(
                        f"[AutoBuyGifts] –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift.gift_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}, —Ü–∏–∫–ª {cycle}, –±–∞–ª–∞–Ω—Å {user.balance}"
                    )
                    payload = (
                        f"autobuy_{gift.gift_id}_to_{user.telegram_id}_cycle{cycle}"
                    )
                    provider_charge_id = f"{payload}_{uuid.uuid4().hex}"
                    result = await self.purchase_gift_uc.execute(
                        buyer_telegram_id=user.telegram_id,
                        recipient_id=user.telegram_id,
                        gift_id=gift.gift_id,
                        gifts_count=1,
                        payload=payload,
                        provider_charge_id=provider_charge_id,
                    )
                    if result["ok"]:
                        user = result["user"]
                        try:
                            await self.bot.send_message(
                                user.telegram_id,
                                f"‚úÖ –ö—É–ø–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {gift.emoji} (ID: {gift.gift_id}) –∑–∞ {gift.star_count}‚≠êÔ∏è. –û—Å—Ç–∞—Ç–æ–∫: {result['user'].balance}‚≠êÔ∏è.",
                            )
                        except Exception as e:
                            logger.error(
                                f"[AutoBuyGifts] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ {user.telegram_id}: {e}"
                            )
                    elif result.get("error_code") == "STARGIFT_USAGE_LIMITED":
                        try:
                            await self.bot.send_message(
                                user.telegram_id,
                                f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ {gift.emoji} (ID: {gift.gift_id}) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è). –ë—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∑–∂–µ.",
                            )
                        except Exception as e:
                            logger.error(
                                f"[AutoBuyGifts] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ª–∏–º–∏—Ç–∞ {user.telegram_id}: {e}"
                            )
                        break
                    else:
                        try:
                            await self.bot.send_message(
                                user.telegram_id,
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift.emoji} (ID: {gift.gift_id}): {result['error']}",
                            )
                        except Exception as e:
                            logger.error(
                                f"[AutoBuyGifts] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ–∫—É–ø–∫–∏ {user.telegram_id}: {e}"
                            )

        await asyncio.gather(
            *(process_user(user, settings) for user, settings in users_settings)
        )
        await self.gift_repo.reset_new_gifts()
        elapsed = time.monotonic() - start_time
        logger.info(f"[UseCase:AutoBuyGifts] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.2f} —Å–µ–∫")
